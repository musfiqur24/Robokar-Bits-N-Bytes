
/*
 *    Removed RTOS 

	Team Members

	A K M SHAFIN ALAM - A20EC4061
	Maria Taskin Aumanee - A20EC3021
	Musfiqur Rahman - A20EC4088
	Farhana Tahseen - A20EC4015
	Afifa Jumana - A20EC4009
	Labib Hasan - A20EC4079

 */

#include "..\inc\hal_robo.h"                /* Include RoboKar HAL                        */

/* ------ Global shared variable -------*/
/* Ideally, this should be protected by a semaphore etc */
struct robostate
{
    int rspeed;                             /* right motor speed  (-100 -- +100)        */
    int lspeed;                             /* left motor speed  (-100 -- +100)        */
    char obstacle;                          /* obstacle? 1 = yes, 0 = no                */
} myrobot;

/*------High priority task----------*/
void CheckCollision(void)
{
    if (robo_proxSensor() == 1)             /* obstacle?                         */
        myrobot.obstacle = 1;               /* signal obstacle present           */
    else
        myrobot.obstacle = 0;               /* signal no obstacle                */
}

/* Control robot Motors TASK */
void CntrlMotors(void)
{
    int speed_r, speed_l;

    speed_r = myrobot.rspeed;
    speed_l = myrobot.lspeed;
    robo_motorSpeed(speed_l, speed_r);
}

/* --- Task for navigating robot ---- */
void Navig(void)
{
    if (myrobot.obstacle == 0)
    {
        // Handle line sensor conditions
        switch (robo_lineSensor())
        {
            case 0: // stop
                myrobot.rspeed = -35;
                myrobot.lspeed = -35;
                break;
            case 1: // slow right
                myrobot.rspeed = -25;
                myrobot.lspeed = 35;
                break;
            case 2: // forward fast
                myrobot.rspeed = 70;
                myrobot.lspeed = 70;
                break;
            case 3: // fast right
                myrobot.rspeed = -25;
                myrobot.lspeed = 45;
                break;
            case 4: // slow left
                myrobot.rspeed = 35;
                myrobot.lspeed = -25;
                break;
            case 6: // fast left
                myrobot.rspeed = 50;
                myrobot.lspeed = -30;
                break;
            case 7: // forward fast
                myrobot.rspeed = 40;
                myrobot.lspeed = 60;
                break;
            default:
                break;
        }
    }
    else if (myrobot.obstacle == 1)  // handle obstacle
    {
        myrobot.rspeed = 0;  // stop
        myrobot.lspeed = 0;

        robo_motorSpeed(myrobot.lspeed, myrobot.rspeed);
        robo_delay(600);

        myrobot.rspeed = -40;  // reverse to left
        myrobot.lspeed = 70;

        robo_motorSpeed(myrobot.lspeed, myrobot.rspeed);
        robo_delay(150);

        myrobot.rspeed = 50;  // straight
        myrobot.lspeed = 50;

        robo_motorSpeed(myrobot.lspeed, myrobot.rspeed);
        robo_delay(2000);
    }

    // Additional handling for reverse motion
    if (myrobot.rspeed < 0 || myrobot.lspeed < 0)
    {
        // Reversing, so adjust according to reverse speed
        robo_motorSpeed(myrobot.lspeed, myrobot.rspeed);
        robo_delay(5);  // Adjust delay as necessary
    }
    else
    {
        // Forward motion, continue with regular delay
        robo_motorSpeed(myrobot.lspeed, myrobot.rspeed);
        robo_delay(5);
    }
}

int main(void)
{
    robo_Setup();                                           /* initialize HAL for RoboKar     */
    
    robo_motorSpeed(STOP_SPEED, STOP_SPEED);                /* Stop the robot                 */
    myrobot.rspeed = STOP_SPEED;                            /* Initialize myrobot states      */
    myrobot.lspeed = STOP_SPEED;
    myrobot.obstacle = 0;                                   /*  No collision                  */

    robo_Honk();
    robo_wait4goPress();                                    /* Wait for to GO                 */
    
    while (1)
    {
        CheckCollision();                                   /* Check for collision            */
        Navig();                                            /* Navigate the robot             */
        CntrlMotors();                                      /* Control the motors             */
        
        robo_LED_toggle();                                  /* Show that we are alive         */
        robo_delay(5000);                                   /* Main loop delay ~ 5 secs       */
    }

    return 0;
}
